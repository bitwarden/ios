import BitwardenKit
import BitwardenResources
import BitwardenSdk
import SwiftUI

// MARK: - PasswordHistoryListView

/// A view containing the history of values generated by the generator.
///
struct PasswordHistoryListView: View {
    // MARK: Properties

    /// The `Store` for this view.
    @ObservedObject var store: Store<PasswordHistoryListState, PasswordHistoryListAction, PasswordHistoryListEffect>

    // MARK: View

    var body: some View {
        Group {
            if store.state.passwordHistory.isEmpty {
                emptyView()
            } else {
                passwordHistoryList()
            }
        }
        .background(SharedAsset.Colors.backgroundPrimary.swiftUIColor.ignoresSafeArea())
        .navigationTitle(Localizations.passwordHistory)
        .toast(store.binding(
            get: \.toast,
            send: PasswordHistoryListAction.toastShown
        ))
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                closeToolbarButton {
                    store.send(.dismiss)
                }
            }

            ToolbarItem(placement: .navigationBarTrailing) {
                if store.state.source == .generator {
                    optionsToolbarMenu {
                        AsyncButton(Localizations.clear) {
                            await store.perform(.clearList)
                        }
                        .accessibilityIdentifier("ClearPasswordList")
                    }
                }
            }
        }
        .task { await store.perform(.appeared) }
    }

    // MARK: Private Views

    /// Returns a view for the empty state when no password history items exist.
    private func emptyView() -> some View {
        GeometryReader { geometry in
            ScrollView {
                VStack(alignment: .center) {
                    Spacer()
                    Text(Localizations.noPasswordsToList)
                        .font(.body)
                        .foregroundColor(SharedAsset.Colors.textPrimary.swiftUIColor)
                        .multilineTextAlignment(.center)
                        .padding(16)
                        .accessibilityIdentifier("NoPasswordsDisplayedLabel")
                    Spacer()
                }
                .frame(maxWidth: .infinity, minHeight: geometry.size.height)
            }
        }
    }

    /// Returns a view for displaying the list of password history items.
    private func passwordHistoryList() -> some View {
        ContentBlock(dividerLeadingPadding: 16) {
            ForEach(store.state.passwordHistory) { passwordHistory in
                passwordHistoryRow(passwordHistory)
            }
        }
        .scrollView()
    }

    /// Return a view for a single row in the password history list.
    private func passwordHistoryRow(_ passwordHistory: PasswordHistoryView) -> some View {
        HStack(spacing: 16) {
            VStack(alignment: .leading, spacing: 2) {
                PasswordText(password: passwordHistory.password, isPasswordVisible: true)
                    .accessibilityIdentifier("GeneratedPasswordValue")

                FormattedDateTimeView(date: passwordHistory.lastUsedDate)
                    .styleGuide(.subheadline)
                    .foregroundColor(SharedAsset.Colors.textSecondary.swiftUIColor)
                    .accessibilityIdentifier("GeneratedPasswordDateLabel")
            }
            .padding(.vertical, 10)
            .frame(maxWidth: .infinity, alignment: .leading)

            Button {
                store.send(.copyPassword(passwordHistory))
            } label: {
                Image(asset: SharedAsset.Icons.copy24)
                    .imageStyle(.rowIcon)
            }
            .accessibilityLabel(Localizations.copyPassword)
            .accessibilityIdentifier("CopyPasswordValueButton")
        }
        .accessibilityElement(children: .combine)
        .accessibilityIdentifier("GeneratedPasswordRow")
        .accessibilityAction(named: Localizations.copyPassword) {
            store.send(.copyPassword(passwordHistory))
        }
        .padding(.horizontal, 16)
    }
}

// MARK: - PasswordHistoryView

extension PasswordHistoryView: @retroactive Identifiable {
    public var id: String {
        password + lastUsedDate.description
    }
}

// MARK: - Previews

#if DEBUG
#Preview("Password History") {
    NavigationView {
        PasswordHistoryListView(store: Store(processor: StateProcessor(
            state: PasswordHistoryListState(
                passwordHistory: [
                    PasswordHistoryView(password: "8gr6uY8CLYQwzr#", lastUsedDate: Date()),
                    PasswordHistoryView(password: "%w4&D*48&CD&j2", lastUsedDate: Date()),
                    PasswordHistoryView(password: "df@58^%8o7e@&@", lastUsedDate: Date()),
                ]
            )
        )))
    }
}

#Preview("Empty") {
    NavigationView {
        PasswordHistoryListView(store: Store(processor: StateProcessor(state: PasswordHistoryListState())))
    }
}
#endif
