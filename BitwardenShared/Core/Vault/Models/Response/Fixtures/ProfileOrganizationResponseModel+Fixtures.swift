import Foundation

@testable import BitwardenShared

extension ProfileOrganizationResponseModel {
    static func fixture(
        enabled: Bool = true,
        familySponsorshipAvailable: Bool = false,
        familySponsorshipFriendlyName: String? = nil,
        familySponsorshipLastSyncDate: Date? = nil,
        familySponsorshipToDelete: Bool? = nil,
        familySponsorshipValidUntil: Date? = nil,
        hasPublicAndPrivateKeys: Bool = true,
        id: String = "profile-organization-1",
        identifier: String? = nil,
        key: String? = nil,
        keyConnectorEnabled: Bool = false,
        keyConnectorUrl: String? = nil,
        maxCollections: Int? = nil,
        maxStorageGb: Int? = nil,
        name: String? = "",
        permissions: Permissions? = nil,
        planProductType: Int? = nil,
        providerId: String? = nil,
        providerName: String? = nil,
        providerType: Int? = nil,
        resetPasswordEnrolled: Bool = false,
        seats: Int? = nil,
        selfHost: Bool = false,
        ssoBound: Bool = false,
        status: OrganizationUserStatusType = .confirmed,
        type: OrganizationUserType = .user,
        use2fa: Bool = false,
        useActivateAutofillPolicy: Bool = false,
        useApi: Bool = false,
        useCustomPermissions: Bool = false,
        useDirectory: Bool = false,
        useEvents: Bool = false,
        useGroups: Bool = false,
        useKeyConnector: Bool = false,
        usePolicies: Bool = false,
        useResetPassword: Bool = false,
        useScim: Bool = false,
        useSecretsManager: Bool = false,
        useSso: Bool = false,
        useTotp: Bool = false,
        userId: String? = nil,
        usersGetPremium: Bool = false
    ) -> ProfileOrganizationResponseModel {
        self.init(
            enabled: enabled,
            familySponsorshipAvailable: familySponsorshipAvailable,
            familySponsorshipFriendlyName: familySponsorshipFriendlyName,
            familySponsorshipLastSyncDate: familySponsorshipLastSyncDate,
            familySponsorshipToDelete: familySponsorshipToDelete,
            familySponsorshipValidUntil: familySponsorshipValidUntil,
            hasPublicAndPrivateKeys: hasPublicAndPrivateKeys,
            id: id,
            identifier: identifier,
            key: key,
            keyConnectorEnabled: keyConnectorEnabled,
            keyConnectorUrl: keyConnectorUrl,
            maxCollections: maxCollections,
            maxStorageGb: maxStorageGb,
            name: name,
            permissions: permissions,
            planProductType: planProductType,
            providerId: providerId,
            providerName: providerName,
            providerType: providerType,
            resetPasswordEnrolled: resetPasswordEnrolled,
            seats: seats,
            selfHost: selfHost,
            ssoBound: ssoBound,
            status: status,
            type: type,
            use2fa: use2fa,
            useActivateAutofillPolicy: useActivateAutofillPolicy,
            useApi: useApi,
            useCustomPermissions: useCustomPermissions,
            useDirectory: useDirectory,
            useEvents: useEvents,
            useGroups: useGroups,
            useKeyConnector: useKeyConnector,
            usePolicies: usePolicies,
            useResetPassword: useResetPassword,
            useScim: useScim,
            useSecretsManager: useSecretsManager,
            useSso: useSso,
            useTotp: useTotp,
            userId: userId,
            usersGetPremium: usersGetPremium
        )
    }
}
